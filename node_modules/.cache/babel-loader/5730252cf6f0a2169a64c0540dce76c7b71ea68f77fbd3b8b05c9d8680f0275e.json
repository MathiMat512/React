{"ast":null,"code":"const API_URL='http://192.168.1.50:3001/api';async function callAPI(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const{method='GET',params={},body}=options;const url=new URL(`${API_URL}${endpoint}`);// Añadir parámetros a la URL si es GET\nif(method==='GET'&&Object.keys(params).length>0){Object.keys(params).forEach(key=>url.searchParams.append(key,params[key]));}const fetchOptions={method,headers:{'Content-Type':'application/json'}};// Añadir cuerpo si es POST\nif(method==='POST'&&body){fetchOptions.body=JSON.stringify(body);}console.log('Request URL:',url.toString());// Log para depuración\nconsole.log('Request Options:',fetchOptions);// Log para depuración\nconst response=await fetch(url,fetchOptions);if(!response.ok){throw new Error(`Error en la petición: ${response.status}`);}const data=await response.json();console.log('Response Data:',data);// Log para depuración\nreturn data;}catch(error){console.error('Error al llamar a la API:',error);throw error;}}const API={// Cambié el endpoint de '/api/buscar' a '/buscar'\nbuscar:params=>callAPI('/buscar',{method:'POST',body:params}),// Si el backend espera un GET, usa esta línea en lugar de la anterior:\n// buscar: (params) => callAPI('/buscar', { method: 'GET', params }),\nctacte:params=>callAPI('/ctacte',{method:'POST',body:params}),deuda:params=>callAPI('/deuda',{method:'GET',params}),ctapagar:params=>callAPI('/ctapagar',{method:'POST',body:params}),pendiente:params=>callAPI('/pendiente',{method:'GET',params}),buscarAllCOAs:()=>callAPI('/allCOAs',{method:'GET'}),login:async usuario=>{try{const response=await fetch(`${API_URL}/auth/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({usuario})});if(!response.ok){throw new Error(`Error en la petición: ${response.status}`);}return await response.json();}catch(error){console.error('Error en login:',error);throw error;}}};window.API=API;// Para depuración","map":{"version":3,"names":["API_URL","callAPI","endpoint","options","arguments","length","undefined","method","params","body","url","URL","Object","keys","forEach","key","searchParams","append","fetchOptions","headers","JSON","stringify","console","log","toString","response","fetch","ok","Error","status","data","json","error","API","buscar","ctacte","deuda","ctapagar","pendiente","buscarAllCOAs","login","usuario","window"],"sources":["C:/Users/Sistemas/Desktop/React/src/api-utils.js"],"sourcesContent":["const API_URL = 'http://192.168.1.50:3001/api';\r\n\r\nasync function callAPI(endpoint, options = {}) {\r\n    try {\r\n        const { method = 'GET', params = {}, body } = options;\r\n        const url = new URL(`${API_URL}${endpoint}`);\r\n\r\n        // Añadir parámetros a la URL si es GET\r\n        if (method === 'GET' && Object.keys(params).length > 0) {\r\n            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\r\n        }\r\n\r\n        const fetchOptions = {\r\n            method,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        // Añadir cuerpo si es POST\r\n        if (method === 'POST' && body) {\r\n            fetchOptions.body = JSON.stringify(body);\r\n        }\r\n\r\n        console.log('Request URL:', url.toString()); // Log para depuración\r\n        console.log('Request Options:', fetchOptions); // Log para depuración\r\n        const response = await fetch(url, fetchOptions);\r\n        if (!response.ok) {\r\n            throw new Error(`Error en la petición: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log('Response Data:', data); // Log para depuración\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error al llamar a la API:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst API = {\r\n    // Cambié el endpoint de '/api/buscar' a '/buscar'\r\n    buscar: (params) => callAPI('/buscar', { method: 'POST', body: params }),\r\n    // Si el backend espera un GET, usa esta línea en lugar de la anterior:\r\n    // buscar: (params) => callAPI('/buscar', { method: 'GET', params }),\r\n\r\n    ctacte: (params) => callAPI('/ctacte', { method: 'POST', body: params }),\r\n    deuda: (params) => callAPI('/deuda', { method: 'GET', params }),\r\n    ctapagar: (params) => callAPI('/ctapagar', { method: 'POST', body: params }),\r\n    pendiente: (params) => callAPI('/pendiente', { method: 'GET', params }),\r\n    buscarAllCOAs: () => callAPI('/allCOAs', { method: 'GET' }),\r\n    login: async (usuario) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/auth/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ usuario })\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error en la petición: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('Error en login:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nwindow.API = API; // Para depuración"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}