{"ast":null,"code":"const API_URL = 'http://192.168.1.50:3001'; // URL base sin el prefijo /api\n\nasync function callAPI(endpoint, options = {}) {\n  try {\n    const {\n      method = 'GET',\n      params = {},\n      body\n    } = options;\n    const url = new URL(`${API_URL}${endpoint}`);\n\n    // Añadir parámetros a la URL si es GET\n    if (method === 'GET' && Object.keys(params).length > 0) {\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n    }\n    const fetchOptions = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Añadir cuerpo si es POST\n    if (method === 'POST' && body) {\n      fetchOptions.body = JSON.stringify(body);\n    }\n    console.log('Request URL:', url.toString()); // Log para depuración\n    console.log('Request Options:', fetchOptions); // Log para depuración\n    const response = await fetch(url, fetchOptions);\n    if (!response.ok) {\n      throw new Error(`Error en la petición: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Response Data:', data); // Log para depuración\n    return data;\n  } catch (error) {\n    console.error('Error al llamar a la API:', error);\n    throw error;\n  }\n}\nconst API = {\n  buscar: params => callAPI('/api/buscar', {\n    method: 'GET',\n    params\n  }),\n  // Ajustado a GET y endpoint correcto\n  ctacte: params => callAPI('/api/ctacte', {\n    method: 'GET',\n    params\n  }),\n  // Ajustado a GET\n  deuda: params => callAPI('/api/deuda', {\n    method: 'GET',\n    params\n  }),\n  ctapagar: params => callAPI('/api/ctapagar', {\n    method: 'GET',\n    params\n  }),\n  // Ajustado a GET\n  pendiente: params => callAPI('/api/pendiente', {\n    method: 'GET',\n    params\n  }),\n  buscarAllCOAs: () => callAPI('/allCOAs', {\n    method: 'GET'\n  }),\n  // Nota: Este endpoint no existe en el backend\n  login: async usuario => {\n    try {\n      const response = await fetch(`${API_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          usuario\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error en la petición: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error en login:', error);\n      throw error;\n    }\n  }\n};\nwindow.API = API;","map":{"version":3,"names":["API_URL","callAPI","endpoint","options","method","params","body","url","URL","Object","keys","length","forEach","key","searchParams","append","fetchOptions","headers","JSON","stringify","console","log","toString","response","fetch","ok","Error","status","data","json","error","API","buscar","ctacte","deuda","ctapagar","pendiente","buscarAllCOAs","login","usuario","window"],"sources":["C:/Users/Sistemas/Desktop/React/src/api-utils.js"],"sourcesContent":["const API_URL = 'http://192.168.1.50:3001'; // URL base sin el prefijo /api\r\n\r\nasync function callAPI(endpoint, options = {}) {\r\n  try {\r\n    const { method = 'GET', params = {}, body } = options;\r\n    const url = new URL(`${API_URL}${endpoint}`);\r\n\r\n    // Añadir parámetros a la URL si es GET\r\n    if (method === 'GET' && Object.keys(params).length > 0) {\r\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\r\n    }\r\n\r\n    const fetchOptions = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    // Añadir cuerpo si es POST\r\n    if (method === 'POST' && body) {\r\n      fetchOptions.body = JSON.stringify(body);\r\n    }\r\n\r\n    console.log('Request URL:', url.toString()); // Log para depuración\r\n    console.log('Request Options:', fetchOptions); // Log para depuración\r\n    const response = await fetch(url, fetchOptions);\r\n    if (!response.ok) {\r\n      throw new Error(`Error en la petición: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('Response Data:', data); // Log para depuración\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error al llamar a la API:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst API = {\r\n  buscar: (params) => callAPI('/api/buscar', { method: 'GET', params }), // Ajustado a GET y endpoint correcto\r\n  ctacte: (params) => callAPI('/api/ctacte', { method: 'GET', params }), // Ajustado a GET\r\n  deuda: (params) => callAPI('/api/deuda', { method: 'GET', params }),\r\n  ctapagar: (params) => callAPI('/api/ctapagar', { method: 'GET', params }), // Ajustado a GET\r\n  pendiente: (params) => callAPI('/api/pendiente', { method: 'GET', params }),\r\n  buscarAllCOAs: () => callAPI('/allCOAs', { method: 'GET' }), // Nota: Este endpoint no existe en el backend\r\n  login: async (usuario) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ usuario })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Error en la petición: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nwindow.API = API;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}